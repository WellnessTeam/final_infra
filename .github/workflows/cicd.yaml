name: 'Terraform CI/CD Pipeline'

on:
  push:
    branches:
      - "dev"
  pull_request:
    branches:
      - "main"

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-northeast-2"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      # Dev 환경에 대한 Terraform Plan
      - name: Terraform Plan (dev)
        if: github.ref == 'refs/heads/dev'
        run: |
          terraform plan -var-file="dev.tfvars" \
          -var "db_password=${{ secrets.DEV_DB_PASSWORD }}" \
          -input=false

      # Dev 환경에 대한 Terraform Apply
      - name: Terraform Apply (dev)
        if: github.ref == 'refs/heads/dev'
        run: |
          terraform apply -var-file="dev.tfvars" \
          -var "db_password=${{ secrets.DEV_DB_PASSWORD }}" \
          -auto-approve -input=false

      # Prod 환경에 대한 Terraform Plan
      - name: Terraform Plan (prod)
        if: github.event_name == 'pull_request' && github.base_ref == 'main'
        run: |
          terraform plan -var-file="prod.tfvars" \
          -var "db_password=${{ secrets.PROD_DB_PASSWORD }}" \
          -input=false

      # Prod 환경에 대한 Terraform Apply
      - name: Terraform Apply (prod)
        if: github.event_name == 'pull_request' && github.base_ref == 'main' && github.event.pull_request.merged == true
        run: |
          terraform apply -var-file="prod.tfvars" \
          -var "db_password=${{ secrets.PROD_DB_PASSWORD }}" \
          -auto-approve -input=false
